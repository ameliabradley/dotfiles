# If this is NOT an interactive shell (such as script or scp)
if ! [[ $- = *i* ]]; then
  # Don't bother. At all.
  return 1;
fi

# Enable terminal colors
export CLICOLOR=1
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
export HISTSIZE="GOTCHA"

# Other useful commands
alias ll="ls -la"
alias s="source ~/.bashrc.common"
alias dotfiles-update="git -C ~/.dotfiles/ pull origin"
alias prompt-autoinstall=". ~/.dotfiles/autoinstall.sh"

# Script state variables
EMULATOR=
BASH_COMPLETION_PATH=

# Get terminal emulator info
_promptGetEmulator () {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    EMULATOR="unknown"
  else
    # Get the terminal emulator name inside the shell script
    # See: https://unix.stackexchange.com/a/264353
    local sid=$(ps -o sid= -p "$$")
    local sid_as_integer=$((sid)) # strips blanks if any
    local session_leader_parent=$(ps -o ppid= -p "$sid_as_integer")
    local session_leader_parent_as_integer=$((session_leader_parent))
    EMULATOR=$(ps -o comm= -p "$session_leader_parent_as_integer")
  fi
}

_promptSetupNeovim () {
  if ! [ -x "$(command -v python3)" ]; then
    echo "Python3 is NOT installed. You should install python3 (required for deoplete)"
    echo "Run: prompt-autoinstall"
  fi

  if ! [ -x "$(command -v pip3)" ]; then
    echo "Pip3 is NOT installed. You should install pip3 (required for deoplete)"
    echo "Run: prompt-autoinstall"
  fi

  if [ -x "$(command -v nvim)" ]; then
    # So long and thanks for all the fish
    alias vim="nvim"

    if [ "$EMULATOR" == "lxterminal" ]; then
      # Fix broken characters in lxterminal + neovim
      # See: https://github.com/neovim/neovim/issues/5990
      export VTE_VERSION="100"
    fi
  else
    echo "neovim not installed"
    echo "Run: prompt-autoinstall"
  fi
}

_promptSetupDocker () {
  if [ -x "$(command -v docker)" ]; then
    alias dcu="docker-compose up -d"
    alias dcs="docker-compose stop"
  fi
}

_promptSetupDarwin () {
  # I decided it doesn't make sense to reinstall this SDK outside of Android studio
  export ANDROID_HOME="/Applications/Android Studio.app/Contents/jre/jdk/Contents/Home"

  if [ -x "$(command -v brew)" ]; then
    BASH_COMPLETION_PATH=$(brew --prefix)/etc/bash_completion
  else
    echo "brew not installed"
    echo "Run: prompt-autoinstall"
  fi
}

_promptSetupBashCompletion () {
  if [[ -f "$BASH_COMPLETION_PATH" ]]; then
    . "$BASH_COMPLETION_PATH"

    # Add GIT autocompletion in bash
    source ~/.git-completion.bash
  else
    echo "bash-completion not installed"
    echo "Run: prompt-autoinstall"
  fi
}

_promptSetComputerTag () {
  # Map my computer names to super cool emoji
  case `hostname` in
    MBLPPXNG8WL.local)
      export COMPUTER_TAG="üå∂  ";;
    avocado)
      export COMPUTER_TAG="ü•ë  ";;
    raspberrypi)
      export COMPUTER_TAG="ü•ß  ";;
    Lees-MacBook-Pro.local)
      export COMPUTER_TAG="üêù  ";;
    *)
      export COMPUTER_TAG="`hostname` ";;
  esac

  # Backup prompt in case I want to run `prompt_off` and disable liquid prompt
  export PS1="${COMPUTER_TAG}"
}

_promptSetupLiquidprompt () {
  local COMPUTER_TAG=$1

  if [[ -d ~/liquidprompt/ ]]; then
    # Liquid prompt: Hide the username unless I'm another user
    export LP_USER_ALWAYS=0

    # Liquid prompt: Special variables
    LP_PS1_PREFIX="\n"
    LP_PS1_POSTFIX="\n${COMPUTER_TAG}"

    source ~/liquidprompt/liquidprompt
  else
    echo "liquidprompt not installed"
    echo "Run: prompt-autoinstall"
  fi
}

_promptFixLocale () {
  # Fix strange errors that pop up when our locale is not set
  # See: https://stackoverflow.com/a/8161863
  export LANG="en_US.UTF-8"
  export LC_ALL="$LANG"
}

_promptCheckDotfiles () {
 # Check the date and time the last git fetch was executed
 # See: https://stackoverflow.com/a/9229377
 local last_fetch=`stat -f '%m' ~/.dotfiles/.git/FETCH_HEAD`

 # Best method to Perform timestamp comparison in bash
 # See: https://stackoverflow.com/a/205694
 local ts=`date '+%s'`
 local diff=$((ts - last_fetch))
 local oneDay=(60 * 60 * 24)
 if ! [ $diff -gt $oneDay ]; then
  exit
 fi

 git -C ~/.dotfiles fetch
 if [ $(git -C ~/.dotfiles rev-parse HEAD) != $(git -C ~/.dotfiles rev-parse @{u}) ]; then
  echo "Hey there! Your dotfiles are out of date!"
  echo "Run dotfiles-update to fix it."
  echo "If you've made changes, you need to check those changes in!"
 fi
}

_promptGetEmulator
_promptCheckDotfiles &
_promptSetupNeovim
_promptSetupDocker
_promptFixLocale
if [[ "$OSTYPE" == "darwin"* ]]; then
  _promptSetupDarwin
else
  BASH_COMPLETION_PATH=/usr/share/bash-completion/bash_completion
fi
_promptSetupBashCompletion
_promptSetComputerTag
_promptSetupLiquidprompt "$COMPUTER_TAG"
